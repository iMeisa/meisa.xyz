{{template "base" .}}

{{define "title"}}F1 Setup Helper{{end}}

{{define "content"}}
    <div class="container">

        <div class="row">
            <h1 class="mb-4">F1 Setup Helper</h1>
        </div>

        <div class="row">
            <div class="btn-group mb-3" id="part-sections"></div>
        </div>

        <div class="row">
            <div class="btn-group" id="setup-buttons">
                <button class="btn btn-success" id="apply-button" onclick="applySetting()">Apply</button>
                <button class="btn btn-danger" id="revert-button" onclick="revertSetting()">Revert</button>
            </div>
        </div>

        <div class="row">
            <div id="parts-tables"></div>
        </div>
    </div>

    <hr>

    <div class="container">

        <div class="row">
            <div class="btn-group mb-1" id="condition-1"></div>
        </div>
        <div class="row">
            <div class="btn-group" id="condition-2"></div>
        </div>

    </div>
{{end}}


{{define "css"}}
    <style>
        /* Tables */
        .part-name {
            width: 30%;
            text-align: start;
        }
        .part-buttons {
            width: 10%
        }
        .part-progress-bars {
            width: 25%
        }
        .part-setup-value {
            width: 5%
        }
        .part-desc {
            width: 30%;
            text-align: end;
        }


        /* Progress Bars */
        .increase-setup {
            background-color: limegreen;
        }

        .decrease-setup {
            background-color: red;
        }

    </style>
{{end}}


{{define "js"}}

    <script>
        activateNav('nav-f1setup')

        const is_mobile = window.matchMedia("only screen and (max-width: 768px)").matches

        const parts = JSON.parse({{index .StringMap "parts_list"}})
        const part_group_names = JSON.parse({{index .StringMap "part_group_names"}})
        const setup_suggestions = JSON.parse({{index .StringMap "setup_suggestions"}})

        let setup = {}

        for (const group_name in parts) {
            for (const part_name in parts[group_name]) {
                setup[part_name] = parts[group_name][part_name]['default']
            }
        }

        buildButtons()
        buildTables()
        firstConditionButtons()


        ////  Tables  ////
        function buildTables(){
            let parts_tables = document.getElementById('parts-tables')
            for (const group_name in parts) {
                parts_tables.innerHTML += `
                    <table class="table table-dark table-${group_name} mt-4 mb-4" id="table-${group_name}">
                        <tbody id="${group_name}-parts">
                        </tbody>
                    </table>
                `

                let group_parts = document.getElementById(`${group_name}-parts`)
                for (const part_name in parts[group_name]) {
                    const part = parts[group_name][part_name]

                    group_parts.innerHTML += `
                        <tr id="${part_name}">
                            <td class="part-name align-middle">${part['name']}</td>
                            <td class="part-buttons align-middle">
                                <button class="btn btn-outline-light btn-add"
                                    onclick="changePartValue('${group_name}', '${part_name}', -${part['step']})"><</button>
                                <button class="btn btn-outline-light btn-sub"
                                    onclick="changePartValue('${group_name}', '${part_name}', ${part['step']})">></button>
                            </td>
                            <td class="part-progress-bars align-middle">
                                <div class="progress">
                                    <div class="progress-bar" id="${part_name}-bar" style="width: 0"></div>
                                    <div class="progress-bar increase-setup" id="${part_name}-bar-increase" style="width: 0"></div>
                                    <div class="progress-bar decrease-setup" id="${part_name}-bar-decrease" style="width: 0"></div>
                                </div>
                            </td>
                            <td class="part-setup-value align-middle">
                                <span id="${part_name}-value" style="width: 50em">${part['default']}</span>
                            </td>
                            <td class="part-desc align-middle">${part['min-name']} ${part['min-value']} - ${part['max-value']} ${part['max-name']}</td>
                        </tr>
                    `
                }
            }
            updateProgressBars()
        }

        function changePartValue(group_name, part_name, step) {
            const part = parts[group_name][part_name]
            let part_setup = document.getElementById(`${part_name}-value`)

            if (part_name === 'brake-bias') { step = -step }
            const setup_value = parseFloat(part_setup.innerHTML)
            const new_setup = ((setup_value * 1000) + (step * 1000)) / 1000

            if (part_name === 'brake-bias') {
                if (new_setup < 71 && new_setup > 49) {
                    part_setup.innerHTML = `${new_setup}`
                }
            }
            else if (!(part['min-value'] - part['step'] === new_setup) && !(new_setup === part['max-value'] + part['step'])) {
                part_setup.innerHTML = `${new_setup}`
            }
            updateProgressBars()
        }

        function showTableGroup(table_name) {
            for (const group_name in parts) {
                const table_group = document.getElementById(`table-${group_name}`)
                if (table_group.hasAttribute('hidden')) { continue }
                table_group.setAttribute('hidden', '')
            }
            document.getElementById(`table-${table_name}`).removeAttribute('hidden')
        }

        function showAllTables() {
            for (const group_name in parts) {
                document.getElementById(`table-${group_name}`).removeAttribute('hidden')
            }
        }

        function updateProgressBars() {
            for (const group_name in parts) {
                for (const part_name in parts[group_name]) {
                    const part = parts[group_name][part_name]
                    const before_value = setup[part_name]
                    const new_value = Number(document.getElementById(`${part_name}-value`).innerHTML)

                    let total_width = calculateWidth(Math.max(new_value, before_value), part['min-value'], part['max-value'])
                    let min_width = calculateWidth(Math.min(before_value, new_value), part['min-value'], part['max-value'])
                    if (part_name === 'brake-bias') {
                        total_width = calculateWidth(Math.min(new_value, before_value), part['min-value'], part['max-value'])
                        min_width = calculateWidth(Math.max(before_value, new_value), part['min-value'], part['max-value'])
                    }
                    const before_width = calculateWidth(before_value, part['min-value'], part['max-value'])
                    const diff_width = total_width - min_width

                    let part_bar = document.getElementById(`${part_name}-bar`)
                    const decrease_bar = document.getElementById(`${part_name}-bar-decrease`)
                    const increase_bar = document.getElementById(`${part_name}-bar-increase`)
                    part_bar.style.width = `${min_width}%`

                    if (min_width < before_width) { decrease_bar.style.width = `${diff_width}%` }
                    else if (total_width > before_width) { increase_bar.style.width = `${diff_width}%` }
                    else {
                        decrease_bar.style.width = '0'
                        increase_bar.style.width = '0'
                    }
                }
            }
        }

        function calculateWidth(current_value, min_value, max_value) {
            return (current_value - min_value) / (max_value - min_value) * 100
        }

        //// Buttons ////
        function buildButtons() {
            let button_group = document.getElementById('part-sections')
            if (is_mobile) {
                button_group.classList.add('btn-group-vertical', 'btn-group-sm')
            }

            for (const group_name in parts) {
                button_group.innerHTML += `
                    <button class="btn btn-outline-primary" type="button" onclick="showTableGroup('${group_name}')">
                        ${part_group_names[group_name]}
                    </button>
                `
            }

            button_group.innerHTML += `<button class="btn btn-outline-light" type="button" onclick="showAllTables()">Show All</button>`
            button_group.innerHTML += `<button class="btn btn-outline-warning" type="button" onclick="showTableGroup('none')">Hide All</button>`
        }

        function applySetting() {
            for (const group_name in parts) {
                for (const part_name in parts[group_name]) {
                    setup[part_name] = Number(document.getElementById(`${part_name}-value`).innerHTML)
                }
            }
            updateProgressBars()
        }

        function revertSetting() {
            for (const part_name in setup) {
                document.getElementById(`${part_name}-value`).innerHTML = setup[part_name]
            }
            updateProgressBars()
        }

        /***********
        Suggestions
         ***********/

        /* Buttons */
        function firstConditionButtons() {
            let button_group = document.getElementById('condition-1')
            for (const condition in setup_suggestions) {
                button_group.innerHTML += `
                    <button class="btn btn-outline-light" type="button" onclick="secondConditionButtons('${condition}')">
                    ${capitalizeAll(condition.replaceAll('_', ' '))}
                    </button>
                `
            }
        }

        function secondConditionButtons(first_condition) {
            let button_group = document.getElementById('condition-2')
            button_group.innerHTML = ''
            for (const condition in setup_suggestions[first_condition]) {
                button_group.innerHTML += `
                    <button class="btn btn-outline-light" type="button">
                    ${capitalizeAll(condition.replaceAll('_', ' '))}
                    </button>
                `
            }
        }

        function capitalizeAll(sentence) {
            const words = sentence.split(" ");

            for (let i = 0; i < words.length; i++) {
                words[i] = words[i][0].toUpperCase() + words[i].substr(1);
            }

            return words.join(" ")
        }

    </script>

{{end}}