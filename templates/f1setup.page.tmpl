{{template "base" .}}

{{define "title"}}F1 Setup Helper{{end}}

{{define "content"}}
    <div class="container">

        <div class="row">
            <h1 class="mb-4">F1 Setup Helper</h1>
        </div>

        <div class="row">
            <div class="btn-group mb-3" id="part-sections"></div>
        </div>

        <div class="row">
            <div class="btn-group" id="setup-buttons">
                <button class="btn btn-success" id="apply-button" onclick="applySetting(); hideApply()" hidden>Apply</button>
                <button class="btn btn-danger" id="revert-button" onclick="revertSetting(); hideApply()" hidden>Revert</button>
            </div>
        </div>

        <div class="row">
            <div id="parts-tables"></div>
        </div>
    </div>

    <hr>

    <div class="container">

        <div class="row">
            <h2 class="mb-3">Adjustments</h2>
        </div>

        <div class="row">
            <div class="btn-group mb-1" id="condition-1"></div>
        </div>
        <div class="row">
            <div class="btn-group" id="condition-2"></div>
        </div>

        <div class="row mt-4" id="suggestions"></div>

    </div>
{{end}}


{{define "css"}}
    <style>
        /* Tables */
        .part-name {
            width: 30%;
            text-align: start;
        }
        .suggestion-part-name {
            width: 40%;
            text-align: start;
        }
        .part-buttons {
            width: 10%
        }
        .suggestion-apply-button {
            width: 20%
        }
        .part-progress-bars {
            width: 25%
        }
        .suggestion-progress-bars {
            width: 25%
        }
        .part-setup-value {
            width: 5%
        }
        .part-desc {
            width: 30%;
            text-align: end;
        }


        /* Progress Bars */
        .increase-setup {
            background-color: limegreen;
        }

        .decrease-setup {
            background-color: red;
        }

    </style>
{{end}}


{{define "js"}}

    <script>
        activateNav('nav-f1setup')

        const is_mobile = window.matchMedia("only screen and (max-width: 768px)").matches

        const parts = JSON.parse({{index .StringMap "parts_list"}})
        const part_group_names = JSON.parse({{index .StringMap "part_group_names"}})
        const setup_suggestions = JSON.parse({{index .StringMap "setup_suggestions"}})

        let setup = {}

        for (const group_name in parts) {
            for (const part_name in parts[group_name]) {
                setup[part_name] = parts[group_name][part_name]['default']
            }
        }

        buildButtons()
        buildTables()
        showTableGroup('aero')
        firstConditionButtons()


        ////  Tables  ////
        function buildTables(){
            let parts_tables = document.getElementById('parts-tables')
            for (const group_name in parts) {
                parts_tables.innerHTML += `
                    <table class="table table-dark table-${group_name} mt-4 mb-4" id="table-${group_name}">
                        <tbody id="${group_name}-parts">
                        </tbody>
                    </table>
                `

                let group_parts = document.getElementById(`${group_name}-parts`)
                for (const part_name in parts[group_name]) {
                    const part = parts[group_name][part_name]

                    group_parts.innerHTML += `
                        <tr id="${part_name}">
                            <td class="part-name align-middle">${part['name']}</td>
                            <td class="part-buttons align-middle">
                                <button class="btn btn-outline-light btn-add"
                                    onclick="changePartValue('${group_name}', '${part_name}', -${part['step']}); showApply()"><</button>
                                <button class="btn btn-outline-light btn-sub"
                                    onclick="changePartValue('${group_name}', '${part_name}', ${part['step']}); showApply()">></button>
                            </td>
                            <td class="part-progress-bars align-middle">
                                <div class="progress">
                                    <div class="progress-bar" id="${part_name}-bar"></div>
                                    <div class="progress-bar increase-setup" id="${part_name}-bar-increase"></div>
                                    <div class="progress-bar decrease-setup" id="${part_name}-bar-decrease"></div>
                                </div>
                            </td>
                            <td class="part-setup-value align-middle">
                                <span id="${part_name}-value" style="width: 50em">${part['default']}</span>
                            </td>
                            <td class="part-desc align-middle">${part['min-name']} ${part['min-value']} - ${part['max-value']} ${part['max-name']}</td>
                        </tr>
                    `
                }
            }
            updateProgressBars()
        }

        function changePartValue(group_name, part_name, step) {
            const part = parts[group_name][part_name]
            let part_setup = document.getElementById(`${part_name}-value`)

            const setup_value = parseFloat(part_setup.innerHTML)
            const new_setup = calculateAdjustment(part_name, setup_value, step)

            if (part_name === 'brake-bias') {
                if (new_setup < 71 && new_setup > 49) {
                    part_setup.innerHTML = `${new_setup}`
                }
            }
            else if (!(part['min-value'] - part['step'] === new_setup) && !(new_setup === part['max-value'] + part['step'])) {
                part_setup.innerHTML = `${new_setup}`
            }
            updateProgressBars()
        }

        function showTableGroup(table_name) {
            for (const group_name in parts) {
                const table_group = document.getElementById(`table-${group_name}`)
                if (table_group.hasAttribute('hidden')) { continue }
                table_group.setAttribute('hidden', '')
            }
            document.getElementById(`table-${table_name}`).removeAttribute('hidden')
        }

        function showAllTables() {
            for (const group_name in parts) {
                document.getElementById(`table-${group_name}`).removeAttribute('hidden')
            }
        }

        function updateProgressBar(group_name, part_name, new_value, is_suggestion) {
            const part = parts[group_name][part_name]
            const before_value = setup[part_name]

            let total_width = calculateWidth(Math.max(new_value, before_value), part['min-value'], part['max-value'])
            let min_width = calculateWidth(Math.min(before_value, new_value), part['min-value'], part['max-value'])
            if (part_name === 'brake-bias') {
                total_width = calculateWidth(Math.min(new_value, before_value), part['min-value'], part['max-value'])
                min_width = calculateWidth(Math.max(before_value, new_value), part['min-value'], part['max-value'])
            }
            const before_width = calculateWidth(before_value, part['min-value'], part['max-value'])
            const diff_width = total_width - min_width

            let part_bar = document.getElementById(`${part_name}-bar`)
            let decrease_bar = document.getElementById(`${part_name}-bar-decrease`)
            let increase_bar = document.getElementById(`${part_name}-bar-increase`)
            if (is_suggestion) {
                part_bar = document.getElementById(`${part_name}-suggestion-bar`)
                decrease_bar = document.getElementById(`${part_name}-suggestion-bar-decrease`)
                increase_bar = document.getElementById(`${part_name}-suggestion-bar-increase`)
            }

            part_bar.style.width = `${min_width}%`

            if (min_width < before_width) { decrease_bar.style.width = `${diff_width}%` }
            else if (total_width > before_width) { increase_bar.style.width = `${diff_width}%` }
            else {
                decrease_bar.style.width = '0'
                increase_bar.style.width = '0'
            }

        }

        function updateProgressBars() {
            for (const group_name in parts) {
                for (const part_name in parts[group_name]) {
                    const new_value = Number(document.getElementById(`${part_name}-value`).innerHTML)
                    updateProgressBar(group_name, part_name, new_value, false)
                }
            }
        }

        function calculateWidth(current_value, min_value, max_value) {
            return (current_value - min_value) / (max_value - min_value) * 100
        }

        function calculateAdjustment(part_name, setup_value, step) {
            if (part_name === 'brake-bias') { step = -step }
            return (((setup_value * 1000) + (step * 1000)) / 1000)
        }

        //// Buttons ////
        function buildButtons() {
            let button_group = document.getElementById('part-sections')
            if (is_mobile) {
                button_group.classList.add('btn-group-vertical', 'btn-group-sm')
            }

            for (const group_name in parts) {
                button_group.innerHTML += `
                    <button class="btn btn-outline-primary" type="button" onclick="showTableGroup('${group_name}')">
                        ${part_group_names[group_name]}
                    </button>
                `
            }

            button_group.innerHTML += `<button class="btn btn-outline-light" type="button" onclick="showAllTables()">Show All</button>`
            button_group.innerHTML += `<button class="btn btn-outline-warning" type="button" onclick="showTableGroup('none')">Hide All</button>`
        }

        function applySetting() {
            for (const group_name in parts) {
                for (const part_name in parts[group_name]) {
                    setup[part_name] = Number(document.getElementById(`${part_name}-value`).innerHTML)
                }
            }
            updateProgressBars()
        }

        function revertSetting() {
            for (const part_name in setup) {
                document.getElementById(`${part_name}-value`).innerHTML = setup[part_name]
            }
            updateProgressBars()
        }

        function showApply() {
            document.getElementById(`apply-button`).removeAttribute('hidden')
            document.getElementById('revert-button').removeAttribute('hidden')
        }

        function hideApply() {
            document.getElementById(`apply-button`).setAttribute('hidden', '')
            document.getElementById('revert-button').setAttribute('hidden', '')
        }

        /***********
        Suggestions
         ***********/

        /* Buttons */
        function firstConditionButtons() {
            let button_group = document.getElementById('condition-1')
            for (const condition in setup_suggestions) {
                button_group.innerHTML += `
                    <button class="btn btn-outline-light" type="button" onclick="secondConditionButtons('${condition}')">
                    ${capitalizeAll(condition.replaceAll('_', ' '))}
                    </button>
                `
            }
        }

        function secondConditionButtons(first_condition) {
            let button_group = document.getElementById('condition-2')
            button_group.innerHTML = ''
            for (const condition in setup_suggestions[first_condition]) {
                button_group.innerHTML += `
                    <button class="btn btn-outline-light" type="button" onclick="loadSuggestions('${first_condition}', '${condition}')">
                    ${capitalizeAll(condition.replaceAll('_', ' '))}
                    </button>
                `
            }
        }

        function loadSuggestions(first_condition, second_condition) {
            let suggestions_div = document.getElementById('suggestions')
            suggestions_div.innerHTML = ''

            const selected_suggestions = setup_suggestions[first_condition][second_condition]
            for (const group_name in selected_suggestions) {
                suggestions_div.innerHTML += `
                    <table class="table table-dark table-${group_name} mt-4 mb-4" id="table-${group_name}-suggestion">
                        <thead>
                            <tr>
                                <th scope="col">${part_group_names[group_name]}</th>
                            </tr>
                        </thead>
                        <tbody id="${group_name}-suggestions"></tbody>
                    </table>
                `

                let group_suggestions = document.getElementById(`${group_name}-suggestions`)
                const suggestion_group = selected_suggestions[group_name]
                for (const part_name in suggestion_group) {
                    if (group_name === 'tires') {continue}  // Temporary until solution found

                    const part = parts[group_name][part_name]
                    const current_part_value = Number(document.getElementById(`${part_name}-value`).innerHTML)
                    const part_setup_suggestion = calculateAdjustment(part_name, current_part_value, (suggestion_group[part_name]['change'] * part['step']))
                    group_suggestions.innerHTML += `
                        <tr>
                            <td class="suggestion-part-name align-middle" id="${part_name}-suggestion">${part['name']}</td>
                            <td class="suggestion-progress-bars align-middle" id="${part_name}-suggestion-bars">
                                <div class="progress">
                                    <div class="progress-bar" id="${part_name}-suggestion-bar"></div>
                                    <div class="progress-bar increase-setup" id="${part_name}-suggestion-bar-increase"></div>
                                    <div class="progress-bar decrease-setup" id="${part_name}-suggestion-bar-decrease"></div>
                                </div>
                            </td>
                            <td class="suggested-${part_name}-value align-middle" id="${part_name}-setup-suggestion">
                                ${current_part_value} -> ${part_setup_suggestion}
                            </td>
                            <td class="suggestion-apply-button align-middle" id="${part_name}-apply-button">
                                <button class="btn btn-success" id="${part_name}-apply"
                                            onclick="applySuggestion('${group_name}',  '${part_name}', ${part_setup_suggestion}, false); showApply()">
                                    Apply
                                </button>

                            </td>
                        </tr>
                    `

                    if (suggestion_group[part_name].hasOwnProperty('or')) {
                        const or_part_name = suggestion_group[part_name]['or']

                        const or_part = parts[group_name][or_part_name]
                        const current_or_part_value = Number(document.getElementById(`${or_part_name}-value`).innerHTML)
                        const or_part_setup_suggestion = calculateAdjustment(or_part_name, current_or_part_value, (suggestion_group[part_name]['change2'] * or_part['step']))

                        document.getElementById(`${part_name}-suggestion`).innerHTML += ` <br> OR <br> ${or_part['name']}`

                        document.getElementById(`${part_name}-suggestion-bars`).innerHTML += `
                            <br>
                            <div class="progress mt-2">
                                <div class="progress-bar" id="${or_part_name}-suggestion-bar"></div>
                                <div class="progress-bar increase-setup" id="${or_part_name}-suggestion-bar-increase"></div>
                                <div class="progress-bar decrease-setup" id="${or_part_name}-suggestion-bar-decrease"></div>
                            </div>
                        `

                        document.getElementById(`${part_name}-setup-suggestion`).innerHTML += `
                            <br><br>
                            ${current_or_part_value} -> ${or_part_setup_suggestion}
                        `

                        document.getElementById(`${part_name}-apply-button`).innerHTML += `
                            <br>
                            <button class="btn btn-success mt-2" id="${or_part_name}-apply"
                                        onclick="applySuggestion('${group_name}',  '${or_part_name}', ${or_part_setup_suggestion}, false); showApply()">
                                Apply
                            </button>
                        `

                        updateProgressBar(group_name, or_part_name, or_part_setup_suggestion, true)
                    }

                    else if (suggestion_group[part_name].hasOwnProperty('and')) {
                        const and_part_name = suggestion_group[part_name]['and']

                        const and_part = parts[group_name][and_part_name]
                        const current_and_part_value = Number(document.getElementById(`${and_part_name}-value`).innerHTML)
                        const and_part_setup_suggestion = calculateAdjustment(and_part_name, current_and_part_value, (suggestion_group[part_name]['change2'] * and_part['step']))

                        document.getElementById(`${part_name}-suggestion`).innerHTML += ` <br> AND <br> ${and_part['name']}`

                        document.getElementById(`${part_name}-suggestion-bars`).innerHTML += `
                            <br>
                            <div class="progress mt-2">
                                <div class="progress-bar" id="${and_part_name}-suggestion-bar"></div>
                                <div class="progress-bar increase-setup" id="${and_part_name}-suggestion-bar-increase"></div>
                                <div class="progress-bar decrease-setup" id="${and_part_name}-suggestion-bar-decrease"></div>
                            </div>
                        `

                        document.getElementById(`${part_name}-setup-suggestion`).innerHTML += `
                            <br><br>
                            ${current_and_part_value} -> ${and_part_setup_suggestion}
                        `

                        document.getElementById(`${part_name}-apply-button`).innerHTML = `
                            <button class="btn btn-success" id="${part_name}-apply"
                                        onclick="applySuggestion('${group_name}',  '${part_name}', ${part_setup_suggestion}, false);
                                        applySuggestion('${group_name}',  '${and_part_name}', ${and_part_setup_suggestion}, true);
                                        showApply()">
                                Apply
                            </button>
                        `

                        updateProgressBar(group_name, and_part_name, and_part_setup_suggestion, true)
                    }

                    updateProgressBar(group_name, part_name, part_setup_suggestion, true)
                }
            }
        }

        function applySuggestion(group_name, part_name, new_value, is_and_part) {
            showTableGroup(group_name)
            document.getElementById(`${part_name}-value`).innerHTML = new_value
            if (!(is_and_part)) {
                document.getElementById(`${part_name}-apply`).setAttribute('disabled', '')
            }
            updateProgressBars()
        }

        function capitalizeAll(sentence) {
            const words = sentence.split(" ");

            for (let i = 0; i < words.length; i++) {
                words[i] = words[i][0].toUpperCase() + words[i].substr(1);
            }

            return words.join(" ")
        }

    </script>

{{end}}